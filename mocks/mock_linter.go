// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/simonjohansson/go-linter/linters (interfaces: Linter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/simonjohansson/go-linter/model"
	reflect "reflect"
)

// MockLinter is a mock of Linter interface
type MockLinter struct {
	ctrl     *gomock.Controller
	recorder *MockLinterMockRecorder
}

// MockLinterMockRecorder is the mock recorder for MockLinter
type MockLinterMockRecorder struct {
	mock *MockLinter
}

// NewMockLinter creates a new mock instance
func NewMockLinter(ctrl *gomock.Controller) *MockLinter {
	mock := &MockLinter{ctrl: ctrl}
	mock.recorder = &MockLinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLinter) EXPECT() *MockLinterMockRecorder {
	return m.recorder
}

// Lint mocks base method
func (m *MockLinter) Lint() (model.Result, error) {
	ret := m.ctrl.Call(m, "Lint")
	ret0, _ := ret[0].(model.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lint indicates an expected call of Lint
func (mr *MockLinterMockRecorder) Lint() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lint", reflect.TypeOf((*MockLinter)(nil).Lint))
}

// LintManifest mocks base method
func (m *MockLinter) LintManifest(arg0 model.Manifest) (model.Result, error) {
	ret := m.ctrl.Call(m, "LintManifest", arg0)
	ret0, _ := ret[0].(model.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LintManifest indicates an expected call of LintManifest
func (mr *MockLinterMockRecorder) LintManifest(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LintManifest", reflect.TypeOf((*MockLinter)(nil).LintManifest), arg0)
}
